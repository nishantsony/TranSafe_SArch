/*
 * File: app/view/comfortPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TranSafe.view.comfortPanel', {
    extend: 'Ext.Panel',
    alias: 'widget.comfortPanel',

    requires: [
        'Ext.Container',
        'Ext.field.Slider',
        'Ext.Label',
        'Ext.Button'
    ],

    config: {
        style: 'background-color: #FFF',
        styleHtmlContent: true,
        scrollable: true,
        items: [
            {
                xtype: 'container',
                centered: false,
                items: [
                    {
                        xtype: 'container',
                        items: [
                            {
                                xtype: 'sliderfield',
                                minWidth: '70%',
                                styleHtmlContent: true,
                                clearIcon: false,
                                label: '',
                                name: '',
                                value: [
                                    5
                                ],
                                maxValue: 10
                            },
                            {
                                xtype: 'label',
                                docked: 'left',
                                html: 'Hot',
                                style: 'color:red;',
                                styleHtmlContent: true
                            },
                            {
                                xtype: 'label',
                                docked: 'right',
                                html: 'Cold',
                                styleHtmlContent: true
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        items: [
                            {
                                xtype: 'sliderfield',
                                minWidth: '',
                                styleHtmlContent: true,
                                label: '',
                                value: [
                                    5
                                ],
                                maxValue: 10
                            },
                            {
                                xtype: 'label',
                                docked: 'left',
                                html: 'Noisy',
                                styleHtmlContent: true
                            },
                            {
                                xtype: 'label',
                                docked: 'right',
                                html: 'Quiet',
                                styleHtmlContent: true
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        items: [
                            {
                                xtype: 'sliderfield',
                                styleHtmlContent: true,
                                label: '',
                                value: [
                                    5
                                ],
                                maxValue: 10
                            },
                            {
                                xtype: 'label',
                                docked: 'left',
                                html: 'Crowded',
                                styleHtmlContent: true
                            },
                            {
                                xtype: 'label',
                                docked: 'right',
                                html: 'Empty',
                                styleHtmlContent: true
                            }
                        ]
                    },
                    {
                        xtype: 'label',
                        centered: false,
                        docked: 'top',
                        html: 'Are you Comfortable?'
                    }
                ]
            },
            {
                xtype: 'sliderfield',
                label: 'Comfort Level',
                labelAlign: 'top',
                value: [
                    50
                ]
            },
            {
                xtype: 'button',
                handler: function(button, e) {
                    var currentdate = new Date();
                    var timestamp = currentdate.getFullYear() + "-"+(currentdate.getMonth()+1)  + "-" + currentdate.getDate() + " "  + currentdate.getHours() + "-"  + currentdate.getMinutes() + "-" + currentdate.getSeconds();
                    var chosenVenue = Ext.getCmp('venueLblSurvey').getHtml();
                    chosenVenue = chosenVenue.replace('You are at ','');
                    /*	getting feelings' values.
                    *	if < 0 this is a negative feeling Sad rather than Happy, Angry rather than Peacful etc.
                    *	for this we calculate |val| and store it in an array along with all the others.
                    *	if = 0 this is neutral
                    *	if > 0 this is a positive feeling
                    */
                    var tempFeelingArray = new Array();
                    tempFeelingArray.push(Ext.getCmp('sliderHappySad').getValue()[0]);
                    tempFeelingArray.push(Ext.getCmp('sliderExcitedBored').getValue()[0]);
                    tempFeelingArray.push(Ext.getCmp('sliderSafeScared').getValue()[0]);
                    tempFeelingArray.push(Ext.getCmp('sliderPeacefulAngry').getValue()[0]);
                    var feelingsValues = new Array();
                    console.log(tempFeelingArray);
                    for(var i = 0; i < 4; i++){
                        feelingsValues=setFeelings(feelingsValues, tempFeelingArray[i]);
                    }
                    console.log(feelingsValues);
                    console.log(chosenVenue);
                    console.log(localStorage.getItem('ifLogged') + ', ' + localStorage.getItem('username'));
                    console.log(SAD_TO_SERVER()+'|'+feelingsValues[SAD_INDEX] + '|' +
                    HAPPY_TO_SERVER()+'|'+feelingsValues[HAPPY_INDEX] + '|' +
                    BORED_TO_SERVER()+'|'+feelingsValues[BORED_INDEX] + '|' +
                    EXCITED_TO_SERVER()+'|'+feelingsValues[EXCITED_INDEX] + '|' +
                    SCARED_TO_SERVER()+'|'+feelingsValues[SCARED_INDEX] + '|' +
                    SAFE_TO_SERVER()+'|'+feelingsValues[SAFE_INDEX] + '|' +
                    ANGRY_TO_SERVER()+'|'+feelingsValues[ANGRY_INDEX] + '|' +
                    PEACEFUL_TO_SERVER()+'|'+feelingsValues[PEACEFUL_INDEX]);

                    // anonimous users
                    if(localStorage.getItem('ifLogged') == 'Invalid User' | localStorage.getItem('ifLogged') === '' | localStorage.getItem('ifLogged') == 'null' | localStorage.getItem('ifLogged') === null){
                        Ext.data.JsonP.request({

                            url: 'http://115.146.86.216:8080/TransNet/services/SurveyBO/SaveSurveyAnonymous',
                            params: {
                                timestamp : timestamp,
                                location: chosenVenue,
                                feeling: SAD_TO_SERVER()+'|'+feelingsValues[SAD_INDEX] + '|' +
                                HAPPY_TO_SERVER()+'|'+feelingsValues[HAPPY_INDEX] + '|' +
                                BORED_TO_SERVER()+'|'+feelingsValues[BORED_INDEX] + '|' +
                                EXCITED_TO_SERVER()+'|'+feelingsValues[EXCITED_INDEX] + '|' +
                                SCARED_TO_SERVER()+'|'+feelingsValues[SCARED_INDEX] + '|' +
                                SAFE_TO_SERVER()+'|'+feelingsValues[SAFE_INDEX] + '|' +
                                ANGRY_TO_SERVER()+'|'+feelingsValues[ANGRY_INDEX] + '|' +
                                PEACEFUL_TO_SERVER()+'|'+feelingsValues[PEACEFUL_INDEX],
                                format: 'json',
                                response: 'application/jsonp'
                            },
                            callbackKey: 'callback',
                            success: function (response) {
                                alert('Thank you!');
                                console.log(response);

                                Ext.Viewport.setActiveItem('statistics',{
                                    type: "slide",
                                    direction: "left"
                                });
                                //                         window.location = 'user_stats/piechart.html';
                            },
                            failure: function (response) {
                                alert('Not working!');
                                console.log(response);
                            },
                            callback: function(successful, data){
                                alert(data);
                            }
                        });
                    }

                    else{
                        // registered logged in users
                        Ext.data.JsonP.request({

                            url: 'http://115.146.86.216:8080/TransNet/services/SurveyBO/SaveSurveyDistinctive',
                            params: {
                                timestamp : timestamp,
                                location: chosenVenue,
                                feeling:  SAD_TO_SERVER()+'|'+feelingsValues[SAD_INDEX] + '|' +
                                HAPPY_TO_SERVER()+'|'+feelingsValues[HAPPY_INDEX] + '|' +
                                BORED_TO_SERVER()+'|'+feelingsValues[BORED_INDEX] + '|' +
                                EXCITED_TO_SERVER()+'|'+feelingsValues[EXCITED_INDEX] + '|' +
                                SCARED_TO_SERVER()+'|'+feelingsValues[SCARED_INDEX] + '|' +
                                SAFE_TO_SERVER()+'|'+feelingsValues[SAFE_INDEX] + '|' +
                                ANGRY_TO_SERVER()+'|'+feelingsValues[ANGRY_INDEX] + '|' +
                                PEACEFUL_TO_SERVER()+'|'+feelingsValues[PEACEFUL_INDEX],
                                username: localStorage.getItem('username'),
                                token: localStorage.getItem('ifLogged'),
                                format: 'json',
                                response: 'application/jsonp'
                            },
                            callbackKey: 'callback',
                            success: function (response) {
                                alert('Thank you!');
                                console.log(response);

                                Ext.Viewport.setActiveItem('statistics',{
                                    type: "slide",
                                    direction: "left"
                                });
                            },
                            failure: function (response) {
                                alert('Not working!');
                                console.log(response);
                            },
                            callback: function(successful, data){
                                alert(data);
                            }
                        });

                    }
                },
                docked: 'bottom',
                itemId: 'mybutton8',
                ui: 'confirm',
                text: 'Submit'
            }
        ]
    }

});